// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: files.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createFile = `-- name: CreateFile :one
INSERT INTO files(
    collection_id, user_id, file_name, file_key
) VALUES (
    $1, $2, $3, $4
)
RETURNING id
`

type CreateFileParams struct {
	CollectionID uuid.UUID
	UserID       uuid.UUID
	FileName     string
	FileKey      string
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createFile,
		arg.CollectionID,
		arg.UserID,
		arg.FileName,
		arg.FileKey,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getFilesForCollection = `-- name: GetFilesForCollection :many
SELECT id, collection_id, user_id, file_name, file_key, uploaded_at, processed FROM files WHERE collection_id=$1 and user_id = $2
`

type GetFilesForCollectionParams struct {
	CollectionID uuid.UUID
	UserID       uuid.UUID
}

func (q *Queries) GetFilesForCollection(ctx context.Context, arg GetFilesForCollectionParams) ([]File, error) {
	rows, err := q.db.QueryContext(ctx, getFilesForCollection, arg.CollectionID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.CollectionID,
			&i.UserID,
			&i.FileName,
			&i.FileKey,
			&i.UploadedAt,
			&i.Processed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
