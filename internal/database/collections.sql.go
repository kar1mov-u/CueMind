// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: collections.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createCollection = `-- name: CreateCollection :one
INSERT INTO collections(
    created_at, name, user_id
) VALUES (
    NOW(), $1, $2
)
RETURNING id
`

type CreateCollectionParams struct {
	Name   string
	UserID uuid.UUID
}

func (q *Queries) CreateCollection(ctx context.Context, arg CreateCollectionParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createCollection, arg.Name, arg.UserID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteCollection = `-- name: DeleteCollection :exec
DELETE FROM collections WHERE id=$1 and user_id=$2
`

type DeleteCollectionParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteCollection(ctx context.Context, arg DeleteCollectionParams) error {
	_, err := q.db.ExecContext(ctx, deleteCollection, arg.ID, arg.UserID)
	return err
}

const getCollectionById = `-- name: GetCollectionById :one
SELECT id, created_at, updated_at, name, user_id FROM collections WHERE id=$1 and user_id=$2
`

type GetCollectionByIdParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) GetCollectionById(ctx context.Context, arg GetCollectionByIdParams) (Collection, error) {
	row := q.db.QueryRowContext(ctx, getCollectionById, arg.ID, arg.UserID)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.UserID,
	)
	return i, err
}

const listCollections = `-- name: ListCollections :many
SELECT id, name FROM collections WHERE user_id=$1
`

type ListCollectionsRow struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) ListCollections(ctx context.Context, userID uuid.UUID) ([]ListCollectionsRow, error) {
	rows, err := q.db.QueryContext(ctx, listCollections, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCollectionsRow
	for rows.Next() {
		var i ListCollectionsRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
